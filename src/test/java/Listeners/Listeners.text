TestNG listeners are the piece of code that listens to the events occurring in the TestNG.
To save the unnecessary utilization of the resources, we cannot let the listeners listen to the code all the time.
Therefore, the listeners in TestNG are activated either before the test execution or before
(noticing that test execution takes the majority share of testing time). TestNG Listeners are applied as interfaces in the code
because "Listeners" is a "class" in TestNG. TestNG provides us with loads of listeners.

TODO Types Of Listeners In TestNG
1. ITestListener
2. IReporter
3. ISuiteListener

TODO 1. ITestListener In TestNG
ITestListener is the most used listener in TestNG with Selenium webdriver.
TestListener listens to specific events (depending on its methods) and executes the code written inside the method.
With ITestListener in TestNG, we can also log the events onto the reports using the Selenium web driver.
The ITestListener contains the following methods:

onStart: This method invokes when the test class is instantiated and before executing any test method.
Syntax: void onStart(ITestContext context);

onFinish: This method invokes when all the test methods have run, and calling of all of their configuration methods happens.
Syntax: void onFinish(ITestContext context);

onTestStart:  This method invokes every time a test method is called and executed.
Syntax: void onTestStart(ITestResult result);

onTestSuccess: This method is invoked every time a test case passes (succeeds).
Syntax: void onTestSuccess(ITestResult result);

onTestFailure: This method invokes every time a test case fails.
Syntax: void onTestFailure(ITestResult result);

onTestSkipped: This method invokes every time a test skips.
Syntax: void onTestSkipped (ITestResult result);

onTestFailedButWithinSuccessPercentage: This method invokes when the test method fails as a whole but has passed a certain success percentage, which is defined by the user.
Syntax: void onTestFailedButSuccessPercentage (ITestResult result);

TODO Listeners can implement in two ways in TestNG:

     At the class level: Annotating listeners on each class in the test code.
     At the suite level: Define the class names to implement listeners in the TestNG XML file.

 TODO implementing ITestListener At Class Level
 create a class and implement ITestListener and override all required method
            class ListenersTestNG implements ITestListener
 and in class where we want to implement that Listener use annotation
            @Listeners(ListenersTestNG.class)>> Listener class name

TODO Implementing ITestListener At Suite Level
To implement the ITestListener at the suite level, remove the @Listener annotation
from the test code, and add the following to the XML file.
            <suite name="ListenerExecution">
            <listeners>
                <listener class-name = "ListenersTestNG"></listener>
                </listeners>

                <test name="ExecutingListeners">


TODO IReporter Listeners In TestNG
The IReporter interface in the TestNG Listener provides us with a medium to generate
 custom reports (i.e., customize the reports generated by TestNG).
 The interface contains a method called generateReport() which we invoke when all
 the suites have run. This method takes three arguments:

xmlSuite: This is the list of suites that exist in the XML file for execution.
suites: This is an object which contains all the information about the test execution
        and suite related information. This information may include the package names,
        class names, test method names, and the test execution results.
outputDirectory: It contains the path to the output folder where the generated reports
                will be available.

How to implement IReporter Listener in TestNG?

TODO  public class ListenersTestNG implements IReporter{
        @Override
        public void generateReport(List<XmlSuite> xmlSuites, List<ISuite> suites,
           String outputDirectory) {

           //Iterate over every suite assigned for execution
           for (ISuite suite : suites) {

              String suiteName = suite.getName();
              Map<String, ISuiteResult> suiteResults = suite.getResults();
              for (ISuiteResult sr : suiteResults.values()) {
                 ITestContext tc = sr.getTestContext();
                 System.out.println("Passed tests for suite '" + suiteName +
                    "' is:" + tc.getPassedTests().getAllResults().size());
                 System.out.println("Failed tests for suite '" + suiteName +
                    "' is:" + tc.getFailedTests().getAllResults().size());
                 System.out.println("Skipped tests for suite '" + suiteName +
                    "' is:" + tc.getSkippedTests().getAllResults().size());
              }
           }
        }
     }




